#!/usr/bin/env bash
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

export shared_volume=/ipdk-shared
export vm_serial=${shared_volume}/vm_socket
export vm_monitor=${shared_volume}/vm_monitor_socket

function send_command_over_unix_socket() {
	echo "${2}" | socat - unix-connect:"${1}"
}

function send_command_over_unix_socket_and_sample_output() {
	socket="${1}"
	cmd="${2}"
	wait_for_secs="${3}"
	out=$(echo "${cmd}" | \
	socat -T"${wait_for_secs}" -,ignoreeof unix-connect:"${socket}")
	echo "${out}"
}

function get_output_from_unix_socket() {
	socket="${1}"
	wait_for_secs="${2}"
	out=$( socat -T"${wait_for_secs}" -,ignoreeof unix-connect:"${socket}" )
	result=$?
	echo "${out}"
}

function wait_until_vm_is_up() {
	console="${1}"

	[ "$DEBUG_VM" == 'true' ] && echo "Start waiting for VM... and console ${console}"

	overall_wait_counter=0
	overall_max_wait_counter=12
	wait_period_sec=10

	while [ ! -S "${console}" ] && \
			[ "${overall_wait_counter}" -le "${overall_max_wait_counter}" ] ; do
		sec=$(( overall_wait_counter * wait_period_sec  ))
		[ "$DEBUG_VM" == 'true' ] && echo "Waiting for VM console: ${console}, sec ${sec} ..."
		sleep "${wait_period_sec}"
		overall_wait_counter=$(( overall_wait_counter + 1 ))
	done

	sleep 4

	socket_output_wait_counter=0
	while [ "$socket_output_wait_counter" -le 2 ] && \
			[ "$overall_wait_counter" -le "${overall_max_wait_counter}" ] ; do
		sec=$(( overall_wait_counter * wait_period_sec ))
		[ "$DEBUG_VM" == 'true' ] && echo "Waiting for VM completes booting, sec ${sec} ..."
		overall_wait_counter=$(( overall_wait_counter + 1 ))
		out=$( get_output_from_unix_socket "${console}" "${wait_period_sec}" )
		[ "$DEBUG_VM" == 'true' ] && echo "${out}"
		socket_output_wait_counter=$(( socket_output_wait_counter + 1 ))
		if [[ -n "${out}" ]] ; then
			socket_output_wait_counter=0
		fi
	done
	return 0
}

function log_in() {
	send_command_over_unix_socket "${1}" "${2}"
	sleep 1
	send_command_over_unix_socket "${1}" "${3}"
	sleep 1
}

function log_in_with_default_credentials() {
	log_in "${1}" "root" "root"
}

function is_virtio_blk_attached() {
	cmd="lsblk --output \"NAME,VENDOR,SUBSYSTEMS\""
	out=$(send_command_over_unix_socket_and_sample_output "${1}" "${cmd}" 1)
	echo "${out}" | grep "block:virtio:pci"
	result=$?
	echo "${out}"
	if [[ ${result} == 0 ]]; then
		echo "virtio-blk is found"
	else
		echo "virtio-blk is not found"
	fi
	return "${result}"
}

function is_virtio_blk_not_attached() {
	if is_virtio_blk_attached "${1}"; then
		return 1
	fi

	return 0
}

function attach_virtio_blk_over_monitor() {
	add_chardev_cmd="chardev-add socket,id=spdk_vhost_blk0,path=${shared_volume}/VirtioBlk0"
	send_command_over_unix_socket "${vm_monitor}" "${add_chardev_cmd}"
	sleep 1
	add_device_cmd="device_add vhost-user-blk-pci,chardev=spdk_vhost_blk0,num-queues=2"
	send_command_over_unix_socket "${vm_monitor}" "${add_device_cmd}"
	sleep 1
}

