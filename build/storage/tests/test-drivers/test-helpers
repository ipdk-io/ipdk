#!/usr/bin/env bash
#
# Copyright (C) 2022 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

shared_volume=/ipdk-shared
vm_serial=${shared_volume}/vm_socket
vm_monitor=${shared_volume}/vm_monitor_socket

function send_command_over_unix_socket() {
	echo "${2}" | socat - unix-connect:${1}
}

function send_command_over_unix_socket_and_sample_output() {
	socket="${1}"
	cmd="${2}"
	wait_for_secs="${3}"
	out=$(echo "${cmd}" | \
	socat -T${wait_for_secs} -,ignoreeof unix-connect:${socket})
	echo "${out}"
}

function wait_until_vm_is_up() {
	sleep 60
}

function log_in() {
	send_command_over_unix_socket ${1} ${2}
	sleep 1
	send_command_over_unix_socket ${1} ${3}
	sleep 1
}

function log_in_with_default_credentials() {
	log_in ${1} "root" "root"
}

function is_virtio_blk_attached() {
	cmd="lsblk --output \"NAME,VENDOR,SUBSYSTEMS\""
	out=$(send_command_over_unix_socket_and_sample_output "${1}" "${cmd}" 1)
	echo "${out}" | grep "block:virtio:pci"
	result=$?
	echo "${out}"
	if [[ ${result} == 0 ]]; then
		echo "virtio-blk is found"
	else
		echo "virtio-blk is not found"
	fi
	return ${result}
}

function is_virtio_blk_not_attached() {
	if is_virtio_blk_attached ${1}; then
		return -1
	fi

	return 0
}

function attach_virtio_blk_over_monitor() {
	add_chardev_cmd="chardev-add socket,id=spdk_vhost_blk0,path=${shared_volume}/VirtioBlk0"
	send_command_over_unix_socket "${vm_monitor}" "${add_chardev_cmd}"
	sleep 1
	add_device_cmd="device_add vhost-user-blk-pci,chardev=spdk_vhost_blk0,num-queues=2"
	send_command_over_unix_socket "${vm_monitor}" "${add_device_cmd}"
	sleep 1
}

